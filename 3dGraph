import networkx as nx
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def plot_hetero_graph_3d(data):
    # Convert hetero -> homo graph for visualization
    G = nx.Graph()

    # Add nodes with type info
    for ntype, x in data.x_dict.items():
        for i in range(x.size(0)):
            G.add_node(f"{ntype}_{i}", ntype=ntype)

    # Add edges with relation info
    for (src, rel, dst), edge_index in data.edge_index_dict.items():
        for u, v in edge_index.t().tolist():
            G.add_edge(f"{src}_{u}", f"{dst}_{v}", rel=rel)

    # 3D spring layout
    pos = nx.spring_layout(G, dim=3, seed=42, k=0.5)

    # Extract positions
    xs, ys, zs = [], [], []
    colors_list = []
    colors = {'order': 'skyblue', 'product': 'lightgreen', 'part': 'salmon'}
    
    for n, d in G.nodes(data=True):
        x, y, z = pos[n]
        xs.append(x)
        ys.append(y)
        zs.append(z)
        colors_list.append(colors.get(d['ntype'], 'gray'))

    # Plot
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')

    # Draw nodes
    ax.scatter(xs, ys, zs, c=colors_list, s=100, alpha=0.8)

    # Draw edges
    for u, v in G.edges():
        x = [pos[u][0], pos[v][0]]
        y = [pos[u][1], pos[v][1]]
        z = [pos[u][2], pos[v][2]]
        ax.plot(x, y, z, c='gray', alpha=0.3)

    # Optional: labels (can get messy in 3D)
    # for n, (x, y, z) in pos.items():
    #     ax.text(x, y, z, n, fontsize=6)

    ax.set_title("Heterogeneous Graph (3D)")
    plt.show()

# Call it
plot_hetero_graph_3d(data)
